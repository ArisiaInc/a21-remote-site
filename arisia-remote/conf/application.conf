# https://www.playframework.com/documentation/latest/Configuration

# This tells the system to start with this class, and load everything from there:
play.application.loader = arisia.ArisiaApplicationLoader

play.filters.enabled += "play.filters.cors.CORSFilter"

play.filters.cors.allowedOrigins =  null

db.default.driver = org.postgresql.Driver

# We need to move the admin stuff to a non-default position, because the frontend needs /assets for their
# stuff:
play.assets.urlPrefix = "/admin/assets"

arisia {
  # Set this to false to open the doors to the public:
  early.access.only = true

  # These are both for use in local development in secrets.conf:
  allow.logins = []
  dev.admins = []

  cm {
    kiosk.url = "https://reg.arisia.org/kiosk/web_reg/index.php"
    # The CM event_id of the current Arisia
    event.id = 32
    # The agreementID of the Code of Conduct
    CoC.id = 31
    # Turn this on in your secrets.conf if you have Convention Master connectivity enabled.
    # In practice, this can only happen on the live site, since that connection is quite locked-down.
    enabled = false
    driver = com.mysql.jdbc.Driver
    # Convention Master is contacted via a local tunnel, so we use a local URL
    url = "jdbc:mysql://localhost/convention_master"
    username = "remote"
    # Obviously, if you turn on enabled, you have to put the password here in secrets.conf
    password = ""

    # When CM integration is not enabled, all users pass through *except* these ones, which get
    # specific errors:
    test {
      # Set this in secrets.conf to specify a hard-coded badge number to use for testing:
      user.badgeNumber = ""
      # Sign in with these usernames (and any password) to test various error scenarios
      user.noAccount = "noAccount"
      user.notRegistered = "notRegistered"
      user.noCoC = "noCoC"
    }
  }

  discord {
    bot {
      # Turn this on to begin processing bot events
      # THIS IS HIGHLY DANGEROUS, and you probably don't need it in your dev environment unless you are Gail or Justin.
      enabled = false
      # If enabled, you will need to applicaton token in your secrets.conf. Get it from Gail or Justin if you need it.
      token = ""
      # Our server
      guildId = "743094117554454599"
      # The base-level role that is enabled for attendees
      arisianRoleId = "759881274269237271"
      # How many records to load from Discord at a time
      page.size = 100
    }
  }

  schedule {
    # Once a minute, check whether we need to start/stop Zoom sessions:
    check.interval = 1m
    # How many minutes before a Zoom program item does the prep session start and end:
    prep.start = 30m
    prep.end = 5m
  }

  timer {
    initial.delay = 10s
  }

  zambia {
    # The location of the "konOpas" dump on the live Zambia site:
    # Note that this is in JSON format now, rather than the official KonOpas JSONP format, since JSON is really
    # what we want:
    url = "https://zambia.arisia.org/konOpas.php"
    # The URL to connect to in order to log into Zambia, so we can pull KonOpas:
    loginUrl = "https://zambia.arisia.org/doLogin.php"
    # How often to refresh from Zambia:
    refresh.interval = 5m
    # The Badge ID and Password of the Zambia user with konOpas access rights; put these in secrets.conf:
    badgeId = ""
    password = ""
  }

  zoom.api {
    # These get put into your secrets.conf in order to turn on Zoom integration:
    key = ""
    secret = ""
    # JWTs are valid for one minute:
    timeout = 60000
    baseUrl = "https://api.zoom.us/v2"
    # The Zoom User ID being used to create meetings, in secrets.conf:
    userId = ""
  }
}

# All secrets MUST go into the .gitignore'd secrets.conf file. See secrets.conf.template for details.
include "secrets.conf"
