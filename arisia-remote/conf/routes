# Routes
# This file defines all application routes (Higher priority routes first)
# https://www.playframework.com/documentation/latest/ScalaRouting
# ~~~~

# An example controller showing a sample home page
# TODO: replace this with serving out the front end
GET     /                           arisia.controllers.FrontendController.index()

##########
#
# API Entry Points
#

# Logs in with the given credentials
# Takes JSON body:
# { "id":"...", "password":"..." }
# Returns OK (200) if the credentials match, or Unauthorized (401) if not
# Sets the Play session cookie, which contains all of the live (non-DB) session information
POST    /api/login                   arisia.controllers.LoginController.login()

GET     /api/me                      arisia.controllers.LoginController.me()

# Logs the current user out
# No body is expected on this one
# Always succeeds with OK (200), regardless of whether the user was logged in or not
# Clears the Play session cookie
POST    /api/logout                  arisia.controllers.LoginController.logout()

# Fetches the current schedule
GET     /api/schedule                arisia.controllers.ScheduleController.getSchedule()
# Fetch the stars for the current user; returns a JSON list of program IDs
GET     /api/schedule/stars          arisia.controllers.ScheduleController.getStars()
# Add a star from the specified program item ID
PUT     /api/schedule/stars/:which   arisia.controllers.ScheduleController.addStar(which)
# Remove the star for the specified program item ID
DELETE  /api/schedule/stars/:which   arisia.controllers.ScheduleController.removeStar(which)
# Try to join a running Zoom room as an attendee
# On success, this will redirect to the actual Zoom URL
GET     /api/schedule/:id/zoom       arisia.controllers.ZoomController.enterItem(id)

# Admin UI, separate from the attendee-facing site
GET     /admin                       arisia.controllers.AdminController.home()
GET     /admin/                      arisia.controllers.AdminController.home()
GET     /admin/manageAdmins          arisia.controllers.AdminController.manageAdmins()
POST    /admin/manageAdmins          arisia.controllers.AdminController.addAdmin()
DELETE  /admin/manageAdmins/:name    arisia.controllers.AdminController.removeAdmin(name)
GET     /admin/manageEarlyAccess          arisia.controllers.AdminController.manageEarlyAccess()
POST    /admin/manageEarlyAccess          arisia.controllers.AdminController.addEarlyAccess()
DELETE  /admin/manageEarlyAccess/:name    arisia.controllers.AdminController.removeEarlyAccess(name)
GET     /admin/rooms                 arisia.controllers.AdminController.manageZoomRooms()

GET     /admin/createRoom            arisia.controllers.AdminController.createRoom()
GET     /admin/editRoom/:id          arisia.controllers.AdminController.showEditRoom(id: Int)
POST    /admin/editRoom              arisia.controllers.AdminController.roomModified()

# This is mainly internal, for testing; we might add a UI if we find a use for it, but don't do that casually:
POST    /admin/meeting               arisia.controllers.AdminController.startMeeting()
DELETE  /admin/meeting/:meetingId    arisia.controllers.AdminController.endMeeting(meetingId)
# Note the non-standard path, which is configured in application.conf, so that frontend
# can own /assets
GET     /admin/assets/*file          controllers.Assets.versioned(path="/public", file: Asset)

# Zambia emulator, providing test data
GET     /test/fakeschedule           arisia.controllers.FakeZambiaController.getSchedule()
# TODO: remove
GET     /test/zoomcall               arisia.controllers.ZoomController.test()

# During development, get the Swagger UI at:
#   http://localhost:9000/docs/swagger-ui/index.html?url=/admin/assets/swagger.json
### NoDocs ###
GET   /docs/swagger-ui/*file        controllers.Assets.at(path:String="/public/lib/swagger-ui", file:String)

# Fetch frontend assets
GET     /*file                       arisia.controllers.FrontendController.assetOrDefault(file)
